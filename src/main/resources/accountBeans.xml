<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:int="http://www.springframework.org/schema/integration" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
    http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<context:annotation-config />
	<context:component-scan base-package="dim" />
	<import resource="splitter-db-beans.xml" />
	<context:property-placeholder location="classpath:config/splitter.properties" />
	<context:property-placeholder
		location="classpath:config/splitter-jdbc.properties" />

	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="8" />
		<property name="maxPoolSize" value="8" />
		<property name="allowCoreThreadTimeOut" value="true" />
	</bean>

	<bean id="accountPrototypeBean" class="com.poc.domain.input.Account"
		scope="prototype" />

	<bean id="inboundFileDir" class="java.lang.String">
		<constructor-arg value="${EcomPortal.InboundFileDir}" />
	</bean>

	<bean id="splitFileDir" class="java.lang.String">
		<constructor-arg value="${EcomPortal.PinCode.SplitFilesDir}" />
	</bean>

	<bean id="archiveFilesDir" class="java.lang.String">
		<constructor-arg value="${EcomPortal.PinCode.ArchiveFilesDir}" />
	</bean>

	<bean id="inboundFileQualifiedName" class="java.lang.String">
		<constructor-arg value="${EcomPortal.PinCode.InboundFileQualifiedName}" />
	</bean>

	<bean id="splitFileQualifiedName" class="java.lang.String">
		<constructor-arg value="${EcomPortal.PinCode.SplitFileQualifiedName}" />
	</bean>

	<bean id="splitCommand" class="java.lang.String">
		<constructor-arg
			value="split -l 250000 ${EcomPortal.PinCode.InboundFileQualifiedName} ${EcomPortal.PinCode.SplitFileQualifiedName}" />
	</bean>

	<bean id="fileSplitterTasklet"
		class="org.springframework.batch.core.step.tasklet.SystemCommandTasklet">
		<property name="command" ref="splitCommand" />
		<property name="timeout" value="9223372036854775807" />
	</bean>

	<bean id="createSplitFileDirectoryTasklet"
		class="org.springframework.batch.core.step.tasklet.SystemCommandTasklet">
		<property name="command" value="mkdir ${EcomPortal.PinCode.SplitFilesDir}" />
		<property name="timeout" value="100000"></property>
	</bean>

	<bean id="pinCodeInboundFilePartitioner"
		class="org.springframework.batch.core.partition.support.MultiResourcePartitioner"
		scope="step">
		<property name="keyName" value="fileName" />
		<property name="resources"
			value="file:/#{jobParameters['splitFileQualifiedName']}*" />
	</bean>

	<bean id="pinCodeFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="resource" value="#{stepExecutionContext['fileName']}" />
		<property name="lineMapper" ref="defaultLineMapper" />
		<property name="saveState" value="true" />
		<property name="strict" value="true" />
	</bean>

	<bean id="ioExceptionWriter" class="org.springframework.batch.item.file.FlatFileItemWriter"
		scope="step">
		<property name="resource"
			value="file:/Users/abnig19/EcomPortal/InboundDataFiles/ioexception_url.csv" />
		<property name="lineAggregator" ref="passthroughLineAggregator" />
		<property name="shouldDeleteIfExists" value="true" />
	</bean>

	<bean id="passthroughLineAggregator"
		class="org.springframework.batch.item.file.transform.PassThroughLineAggregator"
		scope="step" />

	<bean id="defaultLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer">
			<bean
				class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
<!-- 				<property name="quoteCharacter" value='"' /> 
					<property name="delimiter">
						<util:constant
							static-field="org.springframework.batch.item.file.transform.DelimitedLineTokenizer.DELIMITER_TAB" />
					</property> -->
				 <property name="delimiter" value="|"/>
				<property name="names"
					value="OPER_AGMT_CD,OPER_AGMT_ID,UNQ_REL_ID,SRC_REL_ID,SRC_REL_CD,SRC_DESC_TX,SRC_REL_CTRY_NM,SRC_REL_CTRY_CD,REL_NM,REL_NM_TTL_NM,REL_SUR_NM,REL_FRST_NM,REL_MID_NM,REL_NM_SFX_NM,REL_XTRA_NM,REL_TYPE_CD,REL_TYPE_CD_DESC_TX,REL_ID_TYPE_CD,SRC_SPEC_DATA_AVL_FL,STAT_CD,OPN_DT,CLS_DT,MUNT_CD,MUNT_SHNM, MUNT_LONG_NM,LOB_SEG_CD,CTRCT_LE_CD,DSPL_CD,SRC_CAT_CD,CRT_TS,UPD_TS" />
			</bean>
		</property>
		<property name="fieldSetMapper">
			<!-- map to an object -->
			<bean
				class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
				<property name="prototypeBeanName" value="accountPrototypeBean" />
			</bean>
		</property>
	</bean>
	
	<bean id="truncatePincodeTableTasklet" class="dim.processing.poc.tasklet.ExecuteDDLTasklet">
		<property name="dataSource" ref="mysqlDataSource"/>
		<property name="sql" value="TRUNCATE TABLE dim.ACC"/>
	</bean>	

	<!--START OF MULTI RESOURCE PARTITIONER JOB -->
	<batch:job id="importJob" job-repository="jobRepository">
		<batch:step id="truncatePinCodeTable" next="createSplitFileDirectory">
			<batch:tasklet ref="truncatePincodeTableTasklet"
				transaction-manager="transactionManager" />
		</batch:step>

		<batch:step id="createSplitFileDirectory" next="fileSplitter">
			<batch:tasklet ref="createSplitFileDirectoryTasklet"
				transaction-manager="transactionManager" />
		</batch:step>

		<batch:step id="fileSplitter" next="processPinCodeFile">
			<batch:tasklet ref="fileSplitterTasklet"
				transaction-manager="transactionManager" />
		</batch:step>

		<batch:step id="processPinCodeFile" next="cleanupSplitFiles">
			<batch:partition step="processPinCodeRecords"
				partitioner="pinCodeInboundFilePartitioner">
				<batch:handler grid-size="15" task-executor="taskExecutor" />
			</batch:partition>
		</batch:step>

		<batch:step id="cleanupSplitFiles" next="createArchiveDirIfRequired">
			<batch:tasklet ref="cleanupSplitFilesTasklet"
				transaction-manager="transactionManager" />
		</batch:step>

		<batch:step id="createArchiveDirIfRequired" next="archivePinCodeFile">
			<batch:tasklet ref="createArchiveDirTasklet"
				transaction-manager="transactionManager" />
		</batch:step>

		<batch:step id="archivePinCodeFile">
			<batch:tasklet ref="archivePinCodeFileTasklet"
				transaction-manager="transactionManager" />
			<batch:end on="COMPLETED" />
		</batch:step>
	</batch:job>

	<batch:step id="processPinCodeRecords">
		<batch:tasklet transaction-manager="transactionManager">
			<batch:chunk reader="pinCodeFileItemReader" writer="indiaPincodeItemWriter"
				commit-interval="25000">
			</batch:chunk>
		</batch:tasklet>
	</batch:step>
	<!--END OF OF MULTI RESOURCE PARTITIONER JOB -->

	<bean id="indiaPincodeItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="mysqlDataSource" />
		<property name="sql">
			<value>
            <![CDATA[INSERT INTO dim.ACC
(OPER_AGMT_CD,
OPER_AGMT_ID,
UNQ_REL_ID,
SRC_REL_ID,
SRC_REL_CD,
SRC_DESC_TX,
SRC_REL_CTRY_NM,
SRC_REL_CTRY_CD,
REL_NM,
REL_NM_TTL_NM,
REL_SUR_NM,
REL_FRST_NM,
REL_MID_NM,
REL_NM_SFX_NM,
REL_XTRA_NM,
REL_TYPE_CD,
REL_TYPE_CD_DESC_TX,
REL_ID_TYPE_CD,
SRC_SPEC_DATA_AVL_FL,
STAT_CD,
OPN_DT,
CLS_DT,
MUNT_CD,
MUNT_SHNM,
MUNT_LONG_NM,
LOB_SEG_CD,
CTRCT_LE_CD,
DSPL_CD,
SRC_CAT_CD,
CRT_TS,
UPD_TS)
VALUES
(:OPER_AGMT_CD,
:OPER_AGMT_ID,
:UNQ_REL_ID,
:SRC_REL_ID,
:SRC_REL_CD,
:SRC_DESC_TX,
:SRC_REL_CTRY_NM,
:SRC_REL_CTRY_CD,
:REL_NM,
:REL_NM_TTL_NM,
:REL_SUR_NM,
:REL_FRST_NM,
:REL_MID_NM,
:REL_NM_SFX_NM,
:REL_XTRA_NM,
:REL_TYPE_CD,
:REL_TYPE_CD_DESC_TX,
:REL_ID_TYPE_CD,
:SRC_SPEC_DATA_AVL_FL,
:STAT_CD,
:OPN_DT,
:CLS_DT,
:MUNT_CD,
:MUNT_SHNM,
:MUNT_LONG_NM,
:LOB_SEG_CD,
:CTRCT_LE_CD,
:DSPL_CD,
:SRC_CAT_CD,
:CRT_TS,
:UPD_TS);
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

	<!-- END OF DATA EXPORTER JOB -->
</beans>
	